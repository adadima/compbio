
********************
Installation
********************

To compile the code,

> cd src
> make clean
> make

The package was developed and tested with Intel Fortran and PGI fortran 95 compilers.


********************
Input format
********************
APoc takes coordinates in the PDB format as input. A user may use a pocket detection
method of his/her choice. An individual PDB input file for APoc has the following
sections:

<Full chain PDB coordinates>
TER
PKT  <num pocket residues> <pocket volume> <pocket name>
<pocket PDB coordinates>
TER
PKT  <num pocket residues> <pocket volume> <pocket name>
<pocket PDB coordinates>
TER
...

For example,

REMARK full chain PDB structure
ATOM     1   N   LEU    30       1.214   3.191   7.898    
ATOM     1   C   LEU    30       0.174   2.448  10.014    
ATOM     1   CA  LEU    30       0.892   2.036   8.738    
ATOM     1   O   LEU    30      -0.755   1.776  10.450    
ATOM     1   CB  LEU    30       2.133   1.209   9.065    
ATOM     1   CG  LEU    30       2.752   0.404   7.916    
ATOM     1   CD1 LEU    30       3.817  -0.551   8.470    
ATOM     1   CD2 LEU    30       1.691  -0.397   7.183  
...
TER
PKT        37          756            pk1
ATOM     1   N   LEU    30       1.214   3.191   7.898    
ATOM     1   C   LEU    30       0.174   2.448  10.014    
ATOM     1   CA  LEU    30       0.892   2.036   8.738    
ATOM     1   O   LEU    30      -0.755   1.776  10.450    
ATOM     1   CB  LEU    30       2.133   1.209   9.065    
ATOM     1   CG  LEU    30       2.752   0.404   7.916    
ATOM     1   CD1 LEU    30       3.817  -0.551   8.470    
ATOM     1   CD2 LEU    30       1.691  -0.397   7.183    
...
TER
PKT        21          391            pk2
ATOM     1   N   MET     1      -8.949  -3.031 -16.687   
ATOM     1   C   MET     1      -7.412  -1.156 -17.192   
ATOM     1   CA  MET     1      -8.822  -1.546 -16.772   

...

where the first section prior to the first "TER" is the regular PDB coordinates of the full 
structure, and "PKT" marks the start of a pocket definition, 37 is the number of pocket residues,
756 is the pocket volume in grid points, and pk1 indictes pocket name. The pocket name may be 
numeric, e.g., 1,2,3, or alphabetical, e.g., 1ha3_GDP_A_406. By default, APoc considers all 
pockets with more than 100 grid points and 10 pocket residues. These threshold values may be 
changed with options "-pvol" and "-plen", respectively. If you only want to select pockets 
for comparison, you may use options "-pt" and "-pq". Note that APoc only uses the coordinates
of C_alpha and C_beta atoms and ignore other atoms. By supplying the coordinates of these two
types of atoms only, one may save considerably disk space.

 
**************************
Load a block of PDB files
**************************
When one runs many instances of APoc simultaneously on the same file system, frequent I/Os can
dramatically decrease the performance. To deal with this issue, one may cancatenate many PDB files 
into a block file, and load them into memeory at once. This feature is enabled by using the option 
"-block <block file name>". A block file has the following format,

PDBSTA <pdb_file_name1>
<pocket file 1>
PDBEND
PDBSTA <pdb_file_name2>
<pocket file 2>
PDBEND
...

Note that one must still supply a list of templates using the "-lt" option. These templates shall 
have the same file name as specified in the block file. APoc use file names as the identifier to 
match records loaded in the block file to template or query specified in the list files. By modifying 
the lists of the templates or queries, one may select a subset of pockets for comparison without 
re-generating the block file.



********************
Usage
********************
Help is available by using the -h option.

APoc may be used to compare two pockets, a pocket against a set of pockets, or
all-against-all between two sets of pockets. If you supply two structures to compare, 
the first structure is the template and the second structure is the query (or target).

For each pair of structures, the program first performs a global structural comparison in 
sequential order using a standard TM-align algoritm. One may elect to bypass the global alignment
to accelerate comparison. If no pocket found in the pdb structures, the program becomes a normal 
TM-align or stop if one chooses to bypass the global alignment. If there are pockets detected 
in the input files, it will compare pockets in sequential-order-independent manner by default.

The ouput is arranged in pairs of structures compared. For each pair, the first alignment is the
global alignment, followed by all-againat-all alignment of selected pockets. If you want a concise
output without detailed alignment, add the "-v 0" option.



********************
Examples
********************
Input and output files for the examples below are provided under the "example" subdirectory. Each
pdb file contains the original PDB coordinates and one or more ligand-binding pockets.

1. To compare two structures,
   > ../bin/apoc 1ha3A.pdb 3ec1A.pdb

2. To compare a list of templates against a query
   > ../bin/apoc -lt templ.lst 1yr8A.pdb

3. To load a block of PDB files and compare a list of templates against the pocket named "1ha3_GDP_A_406"
in the query 1ha3A.pdb
   > ../bin/apoc -block block.pdb -lt templ.lst -pq 1ha3_GDP_A_406 1ha3A.pdb

4. To compare a list of query againsts a list of templates
   > ../bin/apoc -block block.pdb -lt templ.lst -lq query.lst


Results of these examples are saved in "example/output/*.out".


********************
Version
********************

v1.0b15


********************
Author
********************

Mu Gao
2012-09-19
